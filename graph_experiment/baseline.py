from utils import utils
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB, GaussianNB
import numpy as np
from sklearn import svm
from sklearn.metrics import roc_curve, auc, accuracy_score, recall_score, precision_score
from sklearn.decomposition import TruncatedSVD

features, labels, valid_adj, valid_graph_labels, train_adj, train_graph_labels = utils.load_data(cuda=False)

svd = TruncatedSVD(300)
tr = [[v for row in graph for v in row] for graph in train_adj]
#tr = svd.fit_transform(tr)
vr = [[v for row in graph for v in row] for graph in valid_adj]
#vr = svd.fit_transform(vr)

tl = np.argmax(train_graph_labels, axis=1)
vl = np.argmax(valid_graph_labels, axis=1)

print('Decision Tree:')
cl = DecisionTreeClassifier()
cl = cl.fit(tr,tl)
pl = cl.predict(vr)
print(accuracy_score(vl,pl), precision_score(vl,pl), recall_score(vl,pl))
print('Random Forest:')
cl = RandomForestClassifier(oob_score=True, random_state=10)
cl = cl.fit(tr,tl)
pl = cl.predict(vr)
print(accuracy_score(vl,pl), precision_score(vl,pl), recall_score(vl,pl))
print('bayes:')
cl = GaussianNB()
cl = cl.fit(tr,tl)
pl = cl.predict(vr)
print(accuracy_score(vl,pl), precision_score(vl,pl), recall_score(vl,pl))
print('SVM:')
cl = svm.SVC()
cl = cl.fit(tr,tl)
pl = cl.predict(vr)
print(accuracy_score(vl,pl), precision_score(vl,pl), recall_score(vl,pl))
