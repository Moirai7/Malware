
from data import util
from data import data_utils

fn = 'data/voc.json'
voc = util.load_dict(fn)

def transform(seqs):
   num = len(util.load_voc(fn))
   with open(seqs, 'r') as f:
      res = []
      for ss in f:
        ss = ss.split(' ')[:-1]
        res.append(transition_matrix([voc[w] if w in voc else data_utils.unk_token for w in ss],num))
   return res

def transition_matrix(seq, num):
   M = [[0]*num for _ in range(num)]
   for (i, j) in zip(seq, seq[1:]):
        M[i][j] += 1
   for row in M:
        s = sum(row)
        if s>0:
           row[:] = [f/s for f in row]
   return M

import gensim
def word2vec(seq1, seq2):
   with open(seq1,'r') as f1:
     with open(seq2,'r') as f2:
       data = []
       for ss in f1:
          data.append(ss.split(' ')[:-1])
       for ss in f2:
          data.append(ss.split(' ')[:-1])
       model = gensim.models.Word2Vec(data, min_count = 1, size = 100, window = 5) 
       #model = gensim.models.Word2Vec(data, min_count = 1, size = 100, window = 5, sg = 1) 
       model.wv.save_word2vec_format('data/w2v.txt',binary=False)
       return model

#print(transform('data/valid.seq'))
print(word2vec('data/valid.seq', 'data/train.seq'))
